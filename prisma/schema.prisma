// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  username          String   @unique
  name              String
  bio               String?
  location          String?
  tags              String? // JSON array of tags/categories
  profileImage      String?
  idType            String?
  idNumber          String?
  kraPin            String?
  address           String?
  phone             String?
  role              String   @default("WRITER") // ADMIN or WRITER
  withdrawalAccount String?
  referralCode      String   @unique
  referredById      String?
  referredBy        User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referrals         User[]   @relation("UserReferrals")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  articles    Article[]
  views       View[]
  earnings    Earning[]
  withdrawals Withdrawal[]
  auditLogs    AuditLog[]
}

model Article {
  id             String           @id @default(cuid())
  title          String
  content        String
  images         String? // JSON array of image URLs
  featuredImage  String? // Main featured image URL
  status         ModerationStatus @default(PENDING)
  moderationNote String?
  isBoosted      Boolean          @default(false)
  boostLevel     BoostLevel?
  boostExpiry    DateTime?
  clickValue     Float?
  publishedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  views    View[]
  earnings Earning[]
}

model View {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
}

model Earning {
  id        String   @id @default(cuid())
  amount    Float
  rate      Float // Rate per view
  createdAt DateTime @default(now())

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id             String           @id @default(cuid())
  amount         Float
  status         WithdrawalStatus @default(PENDING)
  flagged        Boolean          @default(false)
  note           String?
  paidAt         DateTime?
  accountDetails String
  createdAt      DateTime         @default(now())
  processedAt    DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  // For dynamic CPC, you can add keys like 'defaultCPC', 'dynamicCPC', etc.
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BoostLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}
