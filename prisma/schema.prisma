// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  username          String   @unique
  name              String
  role              String   @default("WRITER") // ADMIN or WRITER
  withdrawalAccount String?
  referralCode      String   @unique
  referredById      String?
  referredBy        User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referrals         User[]   @relation("UserReferrals")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profile        Profile?
  articles       Article[]
  views          View[]
  earnings       Earning[]
  withdrawals    Withdrawal[]
  auditLogs      AuditLog[]
  wallet         Wallet?
  transactions   Transaction[]
  enrollments    CourseEnrollment[]
  lessonProgress LessonProgress[]
  courseReviews  CourseReview[]
}

model Profile {
  id           String   @id @default(cuid())
  bio          String?
  location     String?
  tags         String? // JSON array of tags/categories
  profileImage String?
  idType       String?
  idNumber     String?
  kraPin       String?
  address      String?
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Article {
  id              String           @id @default(cuid())
  title           String
  content         String
  category        String? // Article category
  images          String? // JSON array of image URLs
  featuredImage   String? // Main featured image URL
  publishedStatus PublishedStatus  @default(DRAFT)
  status          ModerationStatus @default(PENDING)
  moderationNote  String?
  isBoosted       Boolean          @default(false)
  boostLevel      BoostLevel?
  boostExpiry     DateTime?
  clickValue      Float?
  publishedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id])
  views    View[]
  earnings Earning[]
}

model View {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
}

model Earning {
  id        String   @id @default(cuid())
  amount    Float
  rate      Float // Rate per view
  createdAt DateTime @default(now())

  // Relations
  articleId String
  article   Article @relation(fields: [articleId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id             String           @id @default(cuid())
  amount         Float
  status         WithdrawalStatus @default(PENDING)
  flagged        Boolean          @default(false)
  note           String?
  paidAt         DateTime?
  accountDetails String? // Made optional
  phoneNumber    String? // Added for M-Pesa
  method         String           @default("BANK") // BANK, MPESA
  reference      String? // PayHero reference
  transactionId  String? // Link to Transaction model
  createdAt      DateTime         @default(now())
  processedAt    DateTime?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  // For dynamic CPC, you can add keys like 'defaultCPC', 'dynamicCPC', etc.
}

model Wallet {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  balance    Float    @default(0)
  earnings   Float    @default(0)
  investment Float    @default(0)
  currency   String   @default("KES")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id                     String            @id @default(cuid())
  user                   User              @relation(fields: [userId], references: [id])
  userId                 String
  amount                 Float
  type                   String
  description            String
  status                 TransactionStatus @default(PENDING)
  paymentMethod          PaymentMethod?
  mpesaRef               String?
  reference              String?
  mpesaRequestId         String?
  mpesaMerchantRequestId String?
  mpesaTransactionId     String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model CourseCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courses Course[]
}

model Course {
  id               String           @id @default(cuid())
  title            String
  description      String?
  shortDescription String?
  featuredImage    String?
  price            Float            @default(0)
  isFree           Boolean          @default(false)
  isPremium        Boolean          @default(true)
  isPublished      Boolean          @default(false)
  difficulty       CourseDifficulty @default(BEGINNER)
  duration         String? // e.g., "4 weeks", "2 months"
  tags             String? // JSON array of tags
  requirements     String? // JSON array of prerequisites
  whatYouWillLearn String? // JSON array of learning outcomes
  instructor       String?
  enrollmentCount  Int              @default(0)
  rating           Float?
  slug             String           @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  categoryId  String
  category    CourseCategory     @relation(fields: [categoryId], references: [id])
  sections    CourseSection[]
  enrollments CourseEnrollment[]
  reviews     CourseReview[]
}

model CourseSection {
  id          String   @id @default(cuid())
  title       String
  description String?
  orderIndex  Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id            String     @id @default(cuid())
  title         String
  description   String?
  content       String? // Rich text content for article-type lessons
  videoUrl      String? // YouTube, Vimeo, or direct video URL
  videoFile     String? // Uploaded video file path
  pdfFile       String? // PDF file path
  duration      Int? // Duration in seconds for videos
  type          LessonType @default(ARTICLE)
  orderIndex    Int
  isFreePreview Boolean    @default(false)
  isPublished   Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  sectionId String
  section   CourseSection    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress  LessonProgress[]
}

model CourseEnrollment {
  id          String    @id @default(cuid())
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0) // Percentage completion

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model LessonProgress {
  id          String    @id @default(cuid())
  isCompleted Boolean   @default(false)
  watchTime   Int? // For video lessons, time watched in seconds
  completedAt DateTime?

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model CourseReview {
  id        String   @id @default(cuid())
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  MPESA
  CARD
  BANK_TRANSFER
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BoostLevel {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum PublishedStatus {
  DRAFT
  PUBLISHED
}

enum CourseDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  ARTICLE
  VIDEO
  PDF
  QUIZ
}
